{
  "sensitive_filenames": [
    ".pypirc",
    "id_rsa",
    "id_dsa",
    ".bash_history",
    ".htpasswd",
    ".ssh/known_keys",
    ".ssh/authorized_keys",
    "wallet.dat",
    "/etc/shadow",
    "/etc/sudoers",
    "/Local/Google/Chrome/*",
    "secret_token.rb",
    "kwallet",
    ".docker/config.json",
    ".kube/config",
    ".bash_login",
    ".bash_history",
    ".sh_history",
    ".mysql_history",
    ".dbshell",
    ".rediscli_history",
    ".aws/credentials",
    ".viminfo",
    ".htpasswd",
    ".fetchmailrc"
  ],
  "ignore_suspicious_files": [
    ".gitignore",
    ".travis.yml"
  ],
  "function_definitions": [
    {
      "name": "flask.Flask.run",
      "signature": [
        {
          "name": "args",
          "kind": "args"
        },
        {
          "name": "debug",
          "kind": "keyword_only",
          "annotation": "bool",
          "default": false,
          "constraint": true
        },
        {
          "name": "kwargs",
          "kind": "kwargs"
        }
      ],
      "message": "Debug mode enabled in Flask",
      "tags": ["flask_debug"],
      "score": 10
    },
    {
      "_id": "requests_unverified",
      "name": {
        "type": "regex",
        "pattern": "^requests\\.(get|post|put|delete|patch|head|options)$"
      },
      "score": 10,
      "signature": [
        {
          "name": "args",
          "kind": "args"
        },
        {
          "name": "verify",
          "kind": "keyword_only",
          "default": true,
          "annotation": "bool",
          "constraint": false
        },
        {
          "name": "kwargs",
          "kind": "kwargs"
        }
      ],
      "message": "SSL/TLS verification disabled when doing a request"
    },
    {
      "_id": "shell_injection",
      "name": {
        "type": "regex",
        "pattern": "^subprocess\\.(run|Popen|call|check_call|check_output)$"
      },
      "signature": [
        {
          "name": "args",
          "kind": "args"
        },
        {
          "name": "shell",
          "kind": "keyword_only",
          "default": false,
          "annotation": "bool",
          "constraint": true
        },
        {
          "name": "kwargs",
          "kind": "kwargs"
        }
      ],
      "message": "Setting shell=True is dangerous and allows a shell injection attack",
      "score": 20,
      "tags": ["shell_injection"]
    },
    {
      "_id": "dangerous_pickle",
      "name": {
        "type": "regex",
        "pattern": "^(cP|p)ickle\\.loads?$"
      },
      "message": "Usage of pickle is very dangerous and easily exploitable",
      "score": 50,
      "tags": ["pickle_usage"]
    },
    {
      "_id": "mktemp_racecond",
      "name": "tempfile.mktemp",
      "score": 20,
      "message": "Usage of tempfile.mktemp is susceptible to race conditions!"
    },
    {
      "_id": "os_system_execution",
      "name": {
        "type": "regex",
        "pattern": "^os\\.(system|popen[234]?|startfile)$"
      },
      "score": 50,
      "message": "Code is performing system command execution",
      "tags": ["system_execution"]
    },
    {
      "_id": "python_code_execution",
      "name": {
        "type": "regex",
        "pattern": "^(eval|exec)$"
      },
      "score": 100,
      "tags": ["obfuscation", "code_execution"],
      "message": "eval/exec usage found in a source code"
    },
    {
      "_id": "open_file",
      "name": "open",
      "message": "Code if accessing files via open",
      "score": 0,
      "tags": ["file_access"]
    },
    {
      "_id": "md5_deprecated",
      "name": "hashlib.md5",
      "message": "Usage of MD5 for cryptographic purposes is very dangerous and no longer recommended",
      "tags": ["deprecated"],
      "score": 20
    },
    {
      "_id": "yaml_load_unsafe",
      "name": "yaml.load",
      "message": "yaml.load is considered unsafe as it can execute python commands via directive. Use yaml.safe_load instead.",
      "tags": ["yaml_load"],
      "score": 100
    },
    {
      "_id": "inline_import",
      "name": "__import__",
      "score": 50,
      "message": "Inline import performed via __import__ function call",
      "tags": ["import","obfuscation"]
    },
    {
      "_id": "getpass.getuser",
      "name": "getpass.getuser",
      "tags": ["information_gathering"],
      "score": 10,
      "message": "Local username lookup, could be used for exploit to determine if running under the root/admin"
    }
  ],
  "modules": [
    {
      "name": "network",
      "score": 10,
      "modules": [
        "socket",
        "requests",
        "urllib2",
        "urllib",
        "urllib3",
        "httplib",
        "ftplib"
      ]
    },
    {
      "name": "code_execution",
      "score": 10,
      "modules": [
        "importlib",
        "pickle",
        "cPickle",
        "marshal",
        "imp",
        "imputil",
        "zipimport",
        "runpy"
      ]
    },
    {
      "name": "system_execution",
      "score": 10,
      "modules": [
        "subprocess",
        "popen2",
        "commands"
      ]
    },
    {
      "name": "obfuscation",
      "score": 20,
      "modules": [
        "base64"
      ]
    },
    {
      "name": "windows",
      "score": 5,
      "modules": [
        "_winreg",
        "winreg"
      ]
    }
  ],
  "django_modules": [
    "django.shortcuts.render"
  ],
  "taint_sinks": [
    "flask.make_response",
    "flask.jsonify",
    "flask.send_file",
    "flask.db.execute",
    "flask.make_response.set_cookie",
    "os.system",
    "os.fork",
    "os.popen",
    "os.exec*",
    "os.spawn*",
    "__import__",
    "importlib.import_module",
    "importlib.__import__",
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.run",
    "eval",
    "exec",
    "open",
    "MySQLdb.connect.cursor.execute",
    "mysql.connector.connect.cursor.execute",
    "pymysql.connect.cursor.execute",
    "sqlalchemy.orm.scoped_session.execute",
    "psycopg2.connect.cursor.execute",
    "shutil.*",
    "pickle.load",
    "django.shortcuts.render",
    "django.http.HttpResponse",
    "django.http.HttpResponseNotFound",
    "sqlite3.connect.execute"
  ],
  "taint_sources": [
    "input",
    "raw_input",
    "flask.request.args.*",
    "flask.request.form.*",
    "flask.request.path",
    "flask.request.headers.*",
    "flask.request.files.*",
    "flask.request.cookies.*",
    "flask.request.get_json"
  ],
  "taint_clean": [
    "int",
    "float",
    "flask.Markup.escape",
    "shlex.escape"
  ],
  "strings": [
    {
      "id": "api_endpoint",
      "type": "regex",
      "pattern": "^(https?://.{5,}|/[-a-z_\\d/\\.]{3,}|([^ \\\\]*/[^ \\\\]{2,}){2,})$",
      "message": "hardcoded API endpoint",
      "flags": "I"
    },
    {
      "id": "all_interfaces",
      "type": "regex",
      "pattern": "0.0.0.0",
      "message": "Binding to all interfaces may unwillingly expose non-protected interface",
      "score": 10
    },
    {
      "id": "tmp_folder",
      "type": "regex",
      "pattern": "^(/tmp|/var/tmp|/dev/shm).*$",
      "message": "Hardcoded tmp folder in the source code",
      "score": 10
    },
    {
      "id": "url",
      "type": "regex",
      "pattern": "^(http|ftp)s?://.+",
      "message": "A possible URL has been found",
      "score": 0,
      "tags": ["url"]
    }
  ]
}
